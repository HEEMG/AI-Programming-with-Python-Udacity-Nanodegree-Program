{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNCWqHNWsuwsN7KpgtZMWiY"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"l61ZPgXDP0kk"},"outputs":[],"source":["#!/usr/bin/env python3\n","# -*- coding: utf-8 -*-\n","# */AIPND-revision/intropyproject-classify-pet-images/print_results.py\n","#\n","# PROGRAMMER:\n","# DATE CREATED:\n","# REVISED DATE:\n","# PURPOSE: Create a function print_results that prints the results statistics\n","#          from the results statistics dictionary (results_stats_dic). It\n","#          should also allow the user to be able to print out cases of misclassified\n","#          dogs and cases of misclassified breeds of dog using the Results\n","#          dictionary (results_dic).\n","#         This function inputs:\n","#            -The results dictionary as results_dic within print_results\n","#             function and results for the function call within main.\n","#            -The results statistics dictionary as results_stats_dic within\n","#             print_results function and results_stats for the function call within main.\n","#            -The CNN model architecture as model wihtin print_results function\n","#             and in_arg.arch for the function call within main.\n","#            -Prints Incorrectly Classified Dogs as print_incorrect_dogs within\n","#             print_results function and set as either boolean value True or\n","#             False in the function call within main (defaults to False)\n","#            -Prints Incorrectly Classified Breeds as print_incorrect_breed within\n","#             print_results function and set as either boolean value True or\n","#             False in the function call within main (defaults to False)\n","#         This function does not output anything other than printing a summary\n","#         of the final results.\n","##\n","# TODO 6: Define print_results function below, specifically replace the None\n","#       below by the function definition of the print_results function.\n","#       Notice that this function doesn't to return anything because it\n","#       prints a summary of the results using results_dic and results_stats_dic\n","#\n","def print_results(results_dic, results_stats_dic, model,\n","                  print_incorrect_dogs = False, print_incorrect_breed = False):\n","    \"\"\"\n","    Prints summary results on the classification and then prints incorrectly\n","    classified dogs and incorrectly classified dog breeds if user indicates\n","    they want those printouts (use non-default values)\n","    Parameters:\n","      results_dic - Dictionary with key as image filename and value as a List\n","             (index)idx 0 = pet image label (string)\n","                    idx 1 = classifier label (string)\n","                    idx 2 = 1/0 (int)  where 1 = match between pet image and\n","                            classifer labels and 0 = no match between labels\n","                    idx 3 = 1/0 (int)  where 1 = pet image 'is-a' dog and\n","                            0 = pet Image 'is-NOT-a' dog.\n","                    idx 4 = 1/0 (int)  where 1 = Classifier classifies image\n","                            'as-a' dog and 0 = Classifier classifies image\n","                            'as-NOT-a' dog.\n","      results_stats_dic - Dictionary that contains the results statistics (either\n","                   a  percentage or a count) where the key is the statistic's\n","                     name (starting with 'pct' for percentage or 'n' for count)\n","                     and the value is the statistic's value\n","      model - Indicates which CNN model architecture will be used by the\n","              classifier function to classify the pet images,\n","              values must be either: resnet alexnet vgg (string)\n","      print_incorrect_dogs - True prints incorrectly classified dog images and\n","                             False doesn't print anything(default) (bool)\n","      print_incorrect_breed - True prints incorrectly classified dog breeds and\n","                              False doesn't print anything(default) (bool)\n","    Returns:\n","           None - simply printing results.\n","    \"\"\"\n","    # Prints summary statistics over the run\n","    print(\"\\n\\n*** Results Summary for CNN Model Architecture\",model.upper(),\n","          \"***\")\n","    print(\"{:20}: {:3d}\".format('N Images', results_stats_dic['n_images']))\n","    print(\"{:20}: {:3d}\".format('N Dog Images', results_stats_dic['n_dogs_img']))\n","\n","    # TODO: 6a. REPLACE print(\"\") with CODE that prints the text string\n","    #          'N Not-Dog Images' and then the number of NOT-dog images\n","    #          that's accessed by key 'n_notdogs_img' using dictionary\n","    #          results_stats_dic\n","    print(\"{:20}: {:3d}\".format('N Not-Dog Images', results_stats_dic['n_notdogs_img']))\n","\n","\n","    # Prints summary statistics (percentages) on Model Run\n","    print(\" \")\n","    for key in results_stats_dic:\n","        # TODO: 6b. REPLACE pass with CODE that prints out all the percentages\n","        #           in the results_stats_dic dictionary. Recall that all\n","        #           percentages in results_stats_dic have 'keys' that start with\n","        #           the letter p. You will need to write a conditional\n","        #           statement that determines if the key starts with the letter\n","        #           'p' and then you want to use a print statement to print\n","        #           both the key and the value. Remember the value is accessed\n","        #           by results_stats_dic[key] Incorrect Dog\n","        #\n","        if key[0] == \"p\":\n","                print(\"{:20}: {:5.1f}\".format(key, results_stats_dic[key]))\n","\n","\n","\n","    # IF print_incorrect_dogs == True AND there were images incorrectly\n","    # classified as dogs or vice versa - print out these cases\n","    if (print_incorrect_dogs and ((results_stats_dic['n_correct_dogs'] + results_stats_dic['n_correct_notdogs'])!= results_stats_dic['n_images'] )):\n","        print(\"\\nIncorrect dog AND there were images incorrectly classified as dogs (or vice versa):\")\n","\n","        # process through results dict, printing incorrectly classified dogs\n","        for key in results_dic:\n","\n","            # TODO: 6c. REPLACE pass with CODE that prints out the pet label\n","            #           and the classifier label from results_dic dictionary\n","            #           ONLY when the classifier function (classifier label)\n","            #           misclassified dogs specifically:\n","            #             pet label is-a-dog and classifier label is-NOT-a-dog\n","            #               -OR-\n","            #             pet label is-NOT-a-dog and classifier label is-a-dog\n","            #          You will need to write a conditional statement that\n","            #          determines if the classifier function misclassified dogs\n","            #          See 'Adjusting Results Dictionary' section in\n","            #         'Classifying Labels as Dogs' for details on the\n","            #          format of the results_dic dictionary. Remember the value\n","            #          is accessed by results_dic[key] and the value is a list\n","            #          so results_dic[key][idx] - where idx represents the\n","            #          index value of the list and can have values 0-4.\n","            #\n","            # Pet Image Label is a Dog - Classified as NOT-A-DOG -OR-\n","            # Pet Image Label is NOT-a-Dog - Classified as a-DOG\n","            if sum(results_dic[key][3:]) == 1:\n","                print(\"Real: {:>26} Classifier: {:>30}\".format(results_dic[key][0], results_dic[key][1]))\n","\n","    # IF print_incorrect_breed == True AND there were dogs whose breeds\n","    # were incorrectly classified - print out these cases\n","    if (print_incorrect_breed and\n","        (results_stats_dic['n_correct_dogs'] != results_stats_dic['n_correct_breed'])\n","       ):\n","        print(\"\\nIncorrect breed AND there were dogs whose breeds were incorrectly classified:\")\n","\n","        # process through results dict, printing incorrectly classified breeds\n","        for key in results_dic:\n","\n","            # Pet Image Label is-a-Dog, classified as-a-dog but is WRONG breed\n","            if ( sum(results_dic[key][3:]) == 2 and results_dic[key][2] == 0 ):\n","                print(\"Real: {:>26} Classifier: {:>30}\".format(results_dic[key][0], results_dic[key][1]))\n","\n"]}]}